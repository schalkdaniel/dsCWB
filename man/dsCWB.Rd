% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.R
\name{dsCWB}
\alias{dsCWB}
\title{Train a distributed CWB model.}
\usage{
dsCWB(
  connections,
  symbol,
  target = NULL,
  feature_names,
  mstop = 100L,
  learning_rate = 0.1,
  df = 5,
  nknots = 20L,
  ord = 3L,
  derivs = 2L,
  val_fraction = NULL,
  patience = NULL,
  eps_for_break = 0,
  positive = NULL,
  seed = NULL,
  trace = TRUE
)
}
\arguments{
\item{connections}{(`list(OpalConnection)`)\cr
Connections to the DataSHIELD servers (see `?DSI::newDSLoginBuilder`).}

\item{symbol}{(`character(1L)`)\cr
Character containing the name of the data.}

\item{target}{(`character(1L)`)\cr
Character containing the name of the target variable.}

\item{feature_names}{(`character()`)\cr
Character vector of all target variables.}

\item{mstop}{(`integer(1L)`)\cr
Number of boosting iterations.}

\item{learning_rate}{(`numeric(1L)`)\cr
Learning rate.}

\item{df}{(`numeric(1L)`)\cr
Degrees of freedom.}

\item{nknots}{(`integer(1L)`)\cr
Number of inner knots.}

\item{ord}{(`integer(1L)`)\cr
Polynomial degree of basis functions.}

\item{derivs}{(`integer(1L)`)\cr
Number of penalized differences.}

\item{val_fraction}{(`numeric(1L)`)\cr
Fraction of samples used for validation.}

\item{patience}{(`integer(1L)`)\cr
Number of consecutive iterations without improvement to stop the algorithm.}

\item{eps_for_break}{(`numeric(1L)`)\cr
Minimal relative improvement without stopping the algorithm.}

\item{positive}{(`character(1L)`)\cr
Name of the positive class in binary classification.}

\item{seed}{(`numeric(1L)`)\cr
Seed for generating validation data (only applies when val_fraction is set).}

\item{trace}{(`logical(1L)`)\cr
Indicator if the fitting trace should be printed or not.}
}
\value{
Client model of R6 class ClientModel.
}
\description{
Train a distributed CWB model.
}
\examples{
\dontrun{
# Install package on DataSHIELD test server:
surl     = "https://opal-demo.obiba.org/"
username = "administrator"
password = "password"

opal = opalr::opal.login(username = username, password = password, url = surl)
opalr::dsadmin.install_github_package(opal = opal, pkg = "dsCWB", username = "schalkdaniel", ref = "main")
opalr::dsadmin.publish_package(opal = opal, pkg = "dsCWB")
opalr::opal.logout(opal, save = FALSE)

# Establish connection to the DataSHIELD servers:
library(DSI)
library(DSOpal)

builder = newDSLoginBuilder()

builder$append(
  server   = "ds-test-server-dummy1",
  url      = surl,
  user     = username,
  password = password
)
builder$append(
  server   = "ds-test-server-dummy2",
  url      = surl,
  user     = username,
  password = password
)
connections = datashield.login(logins = builder$build(), assign = TRUE)
datashield.assign(connections, "dat", quote(iris))

symbol = "dat"
target = "Sepal.Length"
feature_names = setdiff(names(iris), target)
mstop = 100L
learning_rate = 0.1
df = 5
nknots = 20L
ord = 3L
derivs = 2L
val_fraction = NULL
patience = NULL
eps_for_break = NULL
positive = NULL
seed = NULL

datashield.logout(connections)
}
}
